# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        if head == None or head.next == None:
            return False
        if head.next == head:
            return True
        
        p1 = p2 = head
        while p2 and p2.next:
            p1 = p1.next
            p2 = p2.next.next
            if p1 == p2:
                return True
        return False
#         node = ListNode(0.1)
#         p = head
#         node.next = p.next
#         p.next = node
#         p = p.next
#         while p:
#             # print(p.val, node.val)
            
#             if p.next == None:
#                 return False
#             elif p.next.val == 0.1:
#                 return True
#             else:
#                 p = p.next
                # node = node.next
        
        
